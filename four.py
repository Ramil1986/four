#1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv
a = int(argv[1]) # выработка в часах
b = int(argv[2]) # ставка в час
c = int(argv[3]) / 100 # премия в процентах
print(f'заработная плата сотрудника составляет {a * b} + премия { c * a * b}')


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

new = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new2 = [new[i] for i in range(1, len(new)) if new[i] > new[i - 1]]
print(new2)



# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

new = [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]
print(new)

# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

n = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new = [n[i] for i in range(0, len(n)) if n.count(n[i]) == 1 ]
print(new)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce
items = [i for i in range(100, 1001) if i % 2 == 0]
all = reduce(lambda x,y: x * y, items)
print(all)


# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
def my_rand(a):
    from itertools import count
    for el in count(a):
        print(el)
        if el > 20:
            break
my_rand(10)



# итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения. #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

def my_list(a):
    from itertools import cycle
    li = ['hello', 'Ramil', 'DevOps', 'Forever']
    i = 0
    for el in cycle(li):
        i = i +1
        print(el)
        if i > a:
            break
my_list(20)

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.


def fact(n):
    for i in range(1, n+1):
        yield i
    global s

s = 1
for el in fact(10):
    s = s * el
print(f'факториал {el}! равен {s}')
